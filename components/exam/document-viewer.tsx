"use client"

import { useState } from "react"
import { format } from "date-fns"
import {
  FileText,
  CheckCircle,
  XCircle,
  Clock,
  Download,
  Eye,
  FileCheck,
  FileClock,
  FileX,
  AlertTriangle,
} from "lucide-react"
import { Badge } from "@/components/ui/badge"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card"
import { Dialog, DialogContent, DialogHeader, DialogTitle } from "@/components/ui/dialog"
import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from "@/components/ui/tooltip"
import { formatBytes } from "@/lib/utils"
import type { ExamDocument } from "@/types/exam"

interface DocumentViewerProps {
  documents: ExamDocument[]
}

export function DocumentViewer({ documents }: DocumentViewerProps) {
  const [selectedDocument, setSelectedDocument] = useState<ExamDocument | null>(null)
  const [previewOpen, setPreviewOpen] = useState(false)

  const getDocumentStatusBadge = (status: string) => {
    switch (status) {
      case "verified":
        return (
          <Badge variant="outline" className="bg-green-50 text-green-700 border-green-200 flex items-center gap-1">
            <CheckCircle className="h-3 w-3" />
            Verified
          </Badge>
        )
      case "unverified":
        return (
          <Badge variant="outline" className="bg-yellow-50 text-yellow-700 border-yellow-200 flex items-center gap-1">
            <Clock className="h-3 w-3" />
            Pending Verification
          </Badge>
        )
      case "rejected":
        return (
          <Badge variant="outline" className="bg-red-50 text-red-700 border-red-200 flex items-center gap-1">
            <XCircle className="h-3 w-3" />
            Rejected
          </Badge>
        )
      default:
        return (
          <Badge variant="outline" className="bg-gray-50 text-gray-700 border-gray-200 flex items-center gap-1">
            <AlertTriangle className="h-3 w-3" />
            Unknown
          </Badge>
        )
    }
  }

  const getDocumentTypeIcon = (type: string, status: string) => {
    if (status === "verified") return <FileCheck className="h-8 w-8 text-green-500" />
    if (status === "unverified") return <FileClock className="h-8 w-8 text-yellow-500" />
    if (status === "rejected") return <FileX className="h-8 w-8 text-red-500" />
    return <FileText className="h-8 w-8 text-blue-500" />
  }

  const handlePreview = (document: ExamDocument) => {
    setSelectedDocument(document)
    setPreviewOpen(true)
  }

  const handleDownload = (document: ExamDocument) => {
    // In a real app, this would trigger a download
    alert(`Downloading ${document.name}`)
  }

  return (
    <div className="space-y-4">
      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
        {documents.map((document) => (
          <Card key={document.id} className="overflow-hidden">
            <CardHeader className="pb-2">
              <div className="flex justify-between items-start">
                <div className="flex items-start gap-3">
                  {getDocumentTypeIcon(document.type, document.status)}
                  <div>
                    <CardTitle className="text-base">{document.name}</CardTitle>
                    <CardDescription>
                      Uploaded on {format(new Date(document.uploadDate), "dd MMM yyyy, HH:mm")}
                    </CardDescription>
                  </div>
                </div>
                <div>{getDocumentStatusBadge(document.status)}</div>
              </div>
            </CardHeader>
            <CardContent className="pb-2">
              <div className="text-sm text-muted-foreground">
                <div className="flex justify-between">
                  <span>File size:</span>
                  <span>{formatBytes(document.fileSize)}</span>
                </div>
                {document.isSystemGenerated && (
                  <div className="flex justify-between mt-1">
                    <span>Generated by:</span>
                    <span>System</span>
                  </div>
                )}
                {document.verificationDate && (
                  <div className="flex justify-between mt-1">
                    <span>Verified on:</span>
                    <span>{format(new Date(document.verificationDate), "dd MMM yyyy")}</span>
                  </div>
                )}
              </div>
              {document.notes && (
                <div className="mt-2 p-2 bg-muted rounded-md text-sm">
                  <p className="font-medium">Notes:</p>
                  <p>{document.notes}</p>
                </div>
              )}
            </CardContent>
            <CardFooter className="flex justify-end gap-2 pt-2">
              <TooltipProvider>
                <Tooltip>
                  <TooltipTrigger asChild>
                    <Button variant="outline" size="sm" onClick={() => handlePreview(document)}>
                      <Eye className="h-4 w-4 mr-1" />
                      Preview
                    </Button>
                  </TooltipTrigger>
                  <TooltipContent>Preview document</TooltipContent>
                </Tooltip>
              </TooltipProvider>
              <TooltipProvider>
                <Tooltip>
                  <TooltipTrigger asChild>
                    <Button variant="outline" size="sm" onClick={() => handleDownload(document)}>
                      <Download className="h-4 w-4 mr-1" />
                      Download
                    </Button>
                  </TooltipTrigger>
                  <TooltipContent>Download document</TooltipContent>
                </Tooltip>
              </TooltipProvider>
            </CardFooter>
          </Card>
        ))}
      </div>

      <Dialog open={previewOpen} onOpenChange={setPreviewOpen}>
        <DialogContent className="sm:max-w-[600px]">
          <DialogHeader>
            <DialogTitle>{selectedDocument?.name}</DialogTitle>
          </DialogHeader>
          <div className="flex justify-center p-4 bg-muted rounded-md">
            <img
              src={selectedDocument?.fileUrl || "/placeholder.svg"}
              alt={selectedDocument?.name}
              className="max-h-[400px] object-contain"
            />
          </div>
          <div className="flex justify-end">
            <Button variant="outline" onClick={() => setPreviewOpen(false)}>
              Close
            </Button>
          </div>
        </DialogContent>
      </Dialog>
    </div>
  )
}

