generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model academic_consultations {
  id         String    @id
  date       DateTime
  uraian     String
  keterangan String
  paraf      Boolean   @default(false)
  student_id String
  advisor_id String
  created_at DateTime  @default(now())
  updated_at DateTime
  lecturers  lecturers @relation(fields: [advisor_id], references: [id])
  students   students  @relation(fields: [student_id], references: [id])
}

model academic_events {
  id          String      @id
  title       String
  description String?
  start_date  DateTime
  end_date    DateTime
  location    String?
  type        EventType
  exam_type   ExamType?
  status      EventStatus @default(confirmed)
  student_id  String?
  course_id   String?
  lecturer_id String?
  created_at  DateTime    @default(now())
  updated_at  DateTime
  courses     courses?    @relation(fields: [course_id], references: [id])
  lecturers   lecturers?  @relation(fields: [lecturer_id], references: [id])
  students    students?   @relation(fields: [student_id], references: [id])
}

model accounts {
  id                  String  @id
  user_id             String
  type                String
  provider            String
  provider_account_id String
  refresh_token       String?
  access_token        String?
  expires_at          Int?
  token_type          String?
  scope               String?
  id_token            String?
  session_state       String?
  users               users   @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([provider, provider_account_id])
}

model audit_logs {
  id         String   @id
  user_id    String
  action     String
  resource   String
  details    Json?
  ip_address String?
  user_agent String?
  created_at DateTime @default(now())
  users      users    @relation(fields: [user_id], references: [id])
}

model book_borrowings {
  id          String          @id
  borrow_date DateTime        @default(now())
  due_date    DateTime
  return_date DateTime?
  status      BorrowingStatus @default(active)
  notes       String?
  fine        Decimal?        @db.Decimal(8, 2)
  book_id     String
  student_id  String
  books       books           @relation(fields: [book_id], references: [id])
  students    students        @relation(fields: [student_id], references: [id])
}

model book_categories {
  id          String  @id
  code        String  @unique
  name        String
  description String?
  is_active   Boolean @default(true)
  books       books[]
}

model books {
  id                 String            @id
  title              String
  author             String
  publisher          String
  publication_year   Int
  isbn               String            @unique
  category_id        String
  cover_image        String?
  description        String?
  page_count         Int?
  location           String
  status             BookStatus        @default(available)
  added_date         DateTime          @default(now())
  last_borrowed_date DateTime?
  borrow_count       Int               @default(0)
  book_borrowings    book_borrowings[]
  book_categories    book_categories   @relation(fields: [category_id], references: [id])
}

model budget_allocations {
  id          String  @id
  budget_id   String
  department  String
  amount      Decimal @db.Decimal(12, 2)
  description String?
  budgets     budgets @relation(fields: [budget_id], references: [id], onDelete: Cascade)
}

model budgets {
  id                 String               @id
  name               String
  description        String?
  total_amount       Decimal              @db.Decimal(15, 2)
  used_amount        Decimal              @default(0) @db.Decimal(15, 2)
  category           String
  department         String?
  fiscal_year        String
  status             BudgetStatus         @default(active)
  created_at         DateTime             @default(now())
  updated_at         DateTime
  budget_allocations budget_allocations[]
  expenses           expenses[]
}

model companies {
  id               String             @id
  name             String
  address          String
  city             String
  province         String?
  postal_code      String?
  contact_person   String
  contact_position String?
  contact_email    String?
  contact_phone    String
  website          String?
  logo             String?
  industry         String
  description      String?
  is_active        Boolean            @default(true)
  kkp_applications kkp_applications[]
  kkp_locations    kkp_locations[]
}

model course_schedules {
  id            String  @id
  course_id     String
  day           String
  start_time    String
  end_time      String
  room          String
  building      String?
  semester      String
  academic_year String
  courses       courses @relation(fields: [course_id], references: [id], onDelete: Cascade)
}

model courses {
  id               String             @id
  code             String             @unique
  name             String
  description      String?
  credits          Int
  semester         Int
  department       String
  is_active        Boolean            @default(true)
  lecturer_id      String?
  academic_events  academic_events[]
  course_schedules course_schedules[]
  lecturers        lecturers?         @relation(fields: [lecturer_id], references: [id])
  grades           grades[]
}

model exam_applications {
  id                                                    String            @id
  title                                                 String
  type                                                  ExamType
  status                                                ExamStatus        @default(pending)
  abstract                                              String?
  submission_date                                       DateTime          @default(now())
  scheduled_date                                        DateTime?
  completion_date                                       DateTime?
  location                                              String?
  student_id                                            String
  advisor_1_id                                          String?
  advisor_2_id                                          String?
  created_at                                            DateTime          @default(now())
  updated_at                                            DateTime
  lecturers_exam_applications_advisor_1_id_to_lecturers lecturers?        @relation("exam_applications_advisor_1_id_to_lecturers", fields: [advisor_1_id], references: [id])
  lecturers_exam_applications_advisor_2_id_to_lecturers lecturers?        @relation("exam_applications_advisor_2_id_to_lecturers", fields: [advisor_2_id], references: [id])
  students                                              students          @relation(fields: [student_id], references: [id])
  exam_committees                                       exam_committees[]
  exam_documents                                        exam_documents[]
}

model exam_committees {
  id                String            @id
  exam_id           String
  lecturer_id       String
  role              String
  exam_applications exam_applications @relation(fields: [exam_id], references: [id], onDelete: Cascade)
  lecturers         lecturers         @relation(fields: [lecturer_id], references: [id])

  @@unique([exam_id, lecturer_id])
}

model exam_documents {
  id                String            @id
  name              String
  type              ExamDocumentType
  status            DocumentStatus    @default(pending)
  upload_date       DateTime          @default(now())
  verification_date DateTime?
  file_url          String
  file_size         Int?
  notes             String?
  exam_id           String
  exam_applications exam_applications @relation(fields: [exam_id], references: [id], onDelete: Cascade)
}

model exam_requirements {
  id                        String                      @id
  exam_type                 ExamType
  title                     String
  description               String?
  required                  Boolean                     @default(true)
  order                     Int                         @default(0)
  created_at                DateTime                    @default(now())
  updated_at                DateTime
  exam_student_requirements exam_student_requirements[]
}

model exam_student_requirements {
  id                String            @id
  student_id        String
  requirement_id    String
  completed         Boolean           @default(false)
  completed_at      DateTime?
  file_url          String?
  file_name         String?
  file_size         Int?
  uploaded_at       DateTime?
  verified_at       DateTime?
  notes             String?
  exam_requirements exam_requirements @relation(fields: [requirement_id], references: [id], onDelete: Cascade)
  students          students          @relation(fields: [student_id], references: [id], onDelete: Cascade)

  @@unique([student_id, requirement_id])
}

model expenses {
  id           String        @id
  budget_id    String
  amount       Decimal       @db.Decimal(10, 2)
  description  String
  category     String
  expense_date DateTime
  receipt      String?
  status       ExpenseStatus @default(pending)
  approved_by  String?
  approved_at  DateTime?
  created_at   DateTime      @default(now())
  budgets      budgets       @relation(fields: [budget_id], references: [id])
}

model file_uploads {
  id            String   @id
  filename      String
  original_name String
  path          String
  size          Int
  mime_type     String
  uploaded_by   String
  category      String?
  created_at    DateTime @default(now())
}

model grades {
  id            String   @id
  score         Float
  letter_grade  String
  semester      String
  academic_year String
  student_id    String
  course_id     String
  created_at    DateTime @default(now())
  courses       courses  @relation(fields: [course_id], references: [id])
  students      students @relation(fields: [student_id], references: [id])

  @@unique([student_id, course_id, semester, academic_year])
}

model kkp_applications {
  id                 String          @id
  application_number String          @unique
  title              String
  description        String
  submission_date    DateTime        @default(now())
  start_date         DateTime
  end_date           DateTime
  status             KkpStatus       @default(pending)
  notes              String?
  student_id         String
  group_members      Json?
  supervisor_id      String?
  company_id         String
  created_at         DateTime        @default(now())
  updated_at         DateTime
  companies          companies       @relation(fields: [company_id], references: [id])
  students           students        @relation(fields: [student_id], references: [id])
  lecturers          lecturers?      @relation(fields: [supervisor_id], references: [id])
  kkp_approvals      kkp_approvals[]
  kkp_documents      kkp_documents[]
}

model kkp_approvals {
  id               String           @id
  application_id   String
  approver_role    String
  approver_id      String?
  status           ApprovalStatus
  comments         String?
  approved_at      DateTime?
  kkp_applications kkp_applications @relation(fields: [application_id], references: [id], onDelete: Cascade)
}

model kkp_documents {
  id               String            @id
  name             String
  type             KkpDocumentType
  url              String
  upload_date      DateTime          @default(now())
  status           DocumentStatus    @default(pending)
  notes            String?
  file_size        Int?
  mime_type        String?
  application_id   String?
  location_id      String?
  kkp_applications kkp_applications? @relation(fields: [application_id], references: [id], onDelete: Cascade)
  kkp_locations    kkp_locations?    @relation(fields: [location_id], references: [id], onDelete: Cascade)
}

model kkp_locations {
  id                String              @id
  name              String
  address           String
  city              String
  province          String?
  industry          String
  positions         Json
  quota             Int                 @default(0)
  remaining         Int                 @default(0)
  status            String              @default("available")
  distance          Float?
  contact_person    String?
  contact_email     String?
  contact_phone     String?
  description       String?
  is_active         Boolean             @default(true)
  company_id        String?
  created_by_id     String
  created_at        DateTime            @default(now())
  updated_at        DateTime
  kkp_documents     kkp_documents[]
  companies         companies?          @relation(fields: [company_id], references: [id])
  students          students            @relation(fields: [created_by_id], references: [id])
  kkp_sub_locations kkp_sub_locations[]

  @@unique([name, address])
}

model kkp_requirements {
  id                 String             @id
  student_id         String
  requirement_type   KkpRequirementType
  file_name          String
  original_file_name String
  file_path          String
  file_size          Int
  mime_type          String             @default("application/pdf")
  status             DocumentStatus     @default(pending)
  notes              String?
  uploaded_at        DateTime           @default(now())
  verified_at        DateTime?
  verified_by        String?
  created_at         DateTime           @default(now())
  updated_at         DateTime
  students           students           @relation(fields: [student_id], references: [id])

  @@unique([student_id, requirement_type])
}

model kkp_sub_locations {
  id             String        @id
  name           String
  address        String
  contact_person String
  contact_email  String?
  contact_phone  String?
  location_id    String
  created_at     DateTime      @default(now())
  updated_at     DateTime
  kkp_locations  kkp_locations @relation(fields: [location_id], references: [id], onDelete: Cascade)
}

model lab_announcements {
  id            String       @id
  title         String
  content       String
  is_important  Boolean      @default(false)
  laboratory_id String
  created_at    DateTime     @default(now())
  updated_at    DateTime
  laboratories  laboratories @relation(fields: [laboratory_id], references: [id])
}

model lab_assignment_submissions {
  id                String            @id
  submitted_at      DateTime          @default(now())
  score             Float?
  feedback          String?
  file_url          String?
  student_id        String
  assignment_id     String
  registration_id   String
  created_at        DateTime          @default(now())
  updated_at        DateTime
  lab_assignments   lab_assignments   @relation(fields: [assignment_id], references: [id])
  lab_registrations lab_registrations @relation(fields: [registration_id], references: [id])
  students          students          @relation(fields: [student_id], references: [id])

  @@unique([student_id, assignment_id])
}

model lab_assignments {
  id                         String                       @id
  title                      String
  description                String
  due_date                   DateTime
  max_score                  Float                        @default(100)
  laboratory_id              String
  created_at                 DateTime                     @default(now())
  updated_at                 DateTime
  lab_assignment_submissions lab_assignment_submissions[]
  laboratories               laboratories                 @relation(fields: [laboratory_id], references: [id])
}

model lab_materials {
  id            String       @id
  title         String
  description   String?
  type          String
  file_url      String?
  external_url  String?
  laboratory_id String
  created_at    DateTime     @default(now())
  updated_at    DateTime
  laboratories  laboratories @relation(fields: [laboratory_id], references: [id])
}

model lab_registrations {
  id                         String                       @id
  status                     LabRegistrationStatus        @default(pending)
  registered_at              DateTime                     @default(now())
  completed_at               DateTime?
  progress                   Float                        @default(0)
  grade                      String?
  student_id                 String
  laboratory_id              String
  created_at                 DateTime                     @default(now())
  updated_at                 DateTime
  lab_assignment_submissions lab_assignment_submissions[]
  laboratories               laboratories                 @relation(fields: [laboratory_id], references: [id])
  students                   students                     @relation(fields: [student_id], references: [id])

  @@unique([student_id, laboratory_id])
}

model lab_sessions {
  id            String           @id
  title         String
  description   String?
  session_date  DateTime
  start_time    String
  end_time      String
  location      String?
  status        LabSessionStatus @default(scheduled)
  laboratory_id String
  created_at    DateTime         @default(now())
  updated_at    DateTime
  laboratories  laboratories     @relation(fields: [laboratory_id], references: [id])
}

model laboratories {
  id                String              @id
  code              String              @unique
  name              String
  description       String?
  image             String?
  capacity          Int
  credits           Int
  semester          String
  department        String
  location          String
  category          String
  status            LabStatus           @default(active)
  instructor_id     String?
  created_at        DateTime            @default(now())
  updated_at        DateTime
  lab_announcements lab_announcements[]
  lab_assignments   lab_assignments[]
  lab_materials     lab_materials[]
  lab_registrations lab_registrations[]
  lab_sessions      lab_sessions[]
  lecturers         lecturers?          @relation(fields: [instructor_id], references: [id])
}

model lecturers {
  id                                                            String                   @id
  user_id                                                       String                   @unique
  nip                                                           String                   @unique
  department                                                    String
  position                                                      String
  specialization                                                String?
  phone                                                         String?
  office                                                        String?
  email                                                         String?
  last_sync_at                                                  DateTime?
  academic_consultations                                        academic_consultations[]
  academic_events                                               academic_events[]
  courses                                                       courses[]
  exam_applications_exam_applications_advisor_1_id_to_lecturers exam_applications[]      @relation("exam_applications_advisor_1_id_to_lecturers")
  exam_applications_exam_applications_advisor_2_id_to_lecturers exam_applications[]      @relation("exam_applications_advisor_2_id_to_lecturers")
  exam_committees                                               exam_committees[]
  kkp_applications                                              kkp_applications[]
  laboratories                                                  laboratories[]
  users                                                         users                    @relation(fields: [user_id], references: [id], onDelete: Cascade)
  students                                                      students[]
  thesis_titles                                                 thesis_titles[]
}

model letter_attachments {
  id              String          @id
  name            String
  upload_date     DateTime        @default(now())
  url             String
  file_size       Int?
  mime_type       String?
  request_id      String
  letter_requests letter_requests @relation(fields: [request_id], references: [id], onDelete: Cascade)
}

model letter_requests {
  id                 String               @id
  type               String
  title              String
  purpose            String
  description        String
  status             LetterStatus         @default(submitted)
  request_date       DateTime             @default(now())
  approved_date      DateTime?
  completed_date     DateTime?
  rejected_reason    String?
  additional_info    Json?
  student_id         String
  approval_role      ApprovalRole
  approved_by        String?
  generated_letter   String?
  letter_number      String?
  created_at         DateTime             @default(now())
  updated_at         DateTime
  letter_attachments letter_attachments[]
  students           students             @relation(fields: [student_id], references: [id])
}

model letter_types {
  id                 String       @id
  title              String       @unique
  description        String
  approval_role      ApprovalRole
  estimated_days     Int
  required_documents String[]
  additional_fields  Json?
  is_active          Boolean      @default(true)
  template           String?
}

model notifications {
  id         String           @id
  user_id    String
  title      String
  message    String
  type       NotificationType @default(info)
  is_read    Boolean          @default(false)
  data       Json?
  created_at DateTime         @default(now())
  read_at    DateTime?
}

model payment_items {
  id            String          @id
  name          String
  description   String?
  amount        Decimal         @db.Decimal(10, 2)
  category      PaymentCategory
  semester      String
  academic_year String
  due_date      DateTime
  is_required   Boolean         @default(true)
  is_recurring  Boolean         @default(false)
  payment_id    String?
  created_at    DateTime        @default(now())
  payments      payments?       @relation(fields: [payment_id], references: [id])
}

model payments {
  id             String          @id
  amount         Decimal         @db.Decimal(12, 2)
  description    String
  category       PaymentCategory
  status         PaymentStatus   @default(pending)
  due_date       DateTime
  paid_date      DateTime?
  semester       String
  academic_year  String
  receipt_number String?
  payment_method String?
  notes          String?
  student_id     String
  created_at     DateTime        @default(now())
  updated_at     DateTime
  payment_items  payment_items[]
  students       students        @relation(fields: [student_id], references: [id])
}

model prodi {
  kode       String  @id
  nama       String
  jenjang    String
  fakultas   String
  akreditasi String?
}

model sessions {
  id         String   @id
  user_id    String
  token      String   @unique
  expires_at DateTime
  created_at DateTime @default(now())
  users      users    @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model staff {
  id         String  @id
  user_id    String  @unique
  nip        String? @unique
  department String
  position   String
  phone      String?
  office     String?
  users      users   @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model students {
  id                         String                       @id
  user_id                    String                       @unique
  nim                        String                       @unique
  major                      String
  department                 String
  semester                   Int
  academic_year              String
  phone                      String?
  address                    String?
  guardian                   Json?
  enroll_date                DateTime
  status                     StudentStatus                @default(active)
  gpa                        Float?
  academic_advisor_id        String?
  last_sync_at               DateTime?
  academic_consultations     academic_consultations[]
  academic_events            academic_events[]
  book_borrowings            book_borrowings[]
  exam_applications          exam_applications[]
  exam_student_requirements  exam_student_requirements[]
  grades                     grades[]
  kkp_applications           kkp_applications[]
  kkp_locations              kkp_locations[]
  kkp_requirements           kkp_requirements[]
  lab_assignment_submissions lab_assignment_submissions[]
  lab_registrations          lab_registrations[]
  letter_requests            letter_requests[]
  payments                   payments[]
  lecturers                  lecturers?                   @relation(fields: [academic_advisor_id], references: [id])
  users                      users                        @relation(fields: [user_id], references: [id], onDelete: Cascade)
  thesis_titles              thesis_titles[]
}

model system_configs {
  id          String   @id
  key         String   @unique
  value       String
  description String?
  category    String?
  updated_at  DateTime
}

model thesis_archives {
  id            String        @id
  thesis_id     String        @unique
  archive_date  DateTime      @default(now())
  location      String
  physical_id   String?
  digital_id    String?
  notes         String?
  thesis_titles thesis_titles @relation(fields: [thesis_id], references: [id], onDelete: Cascade)
}

model thesis_reviews {
  id            String        @id
  thesis_id     String
  reviewer_id   String
  action        String
  comments      String?
  review_date   DateTime      @default(now())
  thesis_titles thesis_titles @relation(fields: [thesis_id], references: [id], onDelete: Cascade)
}

model thesis_similarities {
  id                                                                  String        @id
  source_thesis_id                                                    String
  target_thesis_id                                                    String
  similarity_percentage                                               Float
  thesis_titles_thesis_similarities_source_thesis_id_to_thesis_titles thesis_titles @relation("thesis_similarities_source_thesis_id_to_thesis_titles", fields: [source_thesis_id], references: [id], onDelete: Cascade)
  thesis_titles_thesis_similarities_target_thesis_id_to_thesis_titles thesis_titles @relation("thesis_similarities_target_thesis_id_to_thesis_titles", fields: [target_thesis_id], references: [id], onDelete: Cascade)

  @@unique([source_thesis_id, target_thesis_id])
}

model thesis_titles {
  id                                                                        String                @id
  title                                                                     String
  abstract                                                                  String
  keywords                                                                  String[]
  submission_date                                                           DateTime              @default(now())
  status                                                                    ThesisStatus          @default(pending)
  year                                                                      Int
  similarity_score                                                          Float?
  digital_copy                                                              Boolean               @default(false)
  document_url                                                              String?
  external_link                                                             String?
  author_id                                                                 String
  supervisor_id                                                             String?
  department                                                                String
  created_at                                                                DateTime              @default(now())
  updated_at                                                                DateTime
  thesis_archives                                                           thesis_archives?
  thesis_reviews                                                            thesis_reviews[]
  thesis_similarities_thesis_similarities_source_thesis_id_to_thesis_titles thesis_similarities[] @relation("thesis_similarities_source_thesis_id_to_thesis_titles")
  thesis_similarities_thesis_similarities_target_thesis_id_to_thesis_titles thesis_similarities[] @relation("thesis_similarities_target_thesis_id_to_thesis_titles")
  students                                                                  students              @relation(fields: [author_id], references: [id])
  lecturers                                                                 lecturers?            @relation(fields: [supervisor_id], references: [id])
}

model users {
  id         String       @id
  username   String       @unique(map: "users_nidn_key")
  password   String
  name       String
  avatar     String?
  role       Role         @default(mahasiswa)
  sub_role   String?
  is_active  Boolean      @default(true)
  created_at DateTime     @default(now())
  updated_at DateTime
  accounts   accounts[]
  audit_logs audit_logs[]
  lecturers  lecturers?
  sessions   sessions[]
  staff      staff?
  students   students?
}

model role_configurations {
  id          String   @id
  role        Role     @unique
  title       String
  subtitle    String
  icon_name   String
  description String?
  is_active   Boolean  @default(true)
  created_at  DateTime @default(now())
  updated_at  DateTime
}

model verification_tokens {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum ApprovalRole {
  staff_tu
  prodi
  dekan
  none
}

enum ApprovalStatus {
  pending
  approved
  rejected
}

enum BookStatus {
  available
  borrowed
  reserved
  maintenance
}

enum BorrowingStatus {
  active
  returned
  overdue
  lost
}

enum BudgetStatus {
  active
  inactive
  closed
}

enum DocumentStatus {
  pending
  verified
  rejected
}

enum EventStatus {
  confirmed
  pending
  cancelled
  completed
}

enum EventType {
  exam
  class
  lab
  consultation
  seminar
  workshop
  deadline
  organization
}

enum ExamDocumentType {
  payment_proof
  transcript
  proposal
  supervisor_approval
  pembayaran_bpp
  biaya_komprehensif
  surat_sk_pembimbing
  surat_penyelesaian_kkp
  transkrip_nilai_145
  praktikum_ilmu_falaq
  surat_publikasi_produk
  bukti_publish_produk
  surat_baca_alquran
  sertifikat_dad
  uji_plagiat_skripsi
  kartu_kontrol_seminar
  persetujuan_pembimbing
  biaya_ujian_seminar
  transkrip_nilai_hasil
  sertifikat_praktikum
  uji_plagiat_hasil
  persetujuan_pembimbing_hasil
  skripsi_6_rangkap
  pembayaran_ujian
  biaya_tambahan_wd2
  pembayaran_wisuda_perpustakaan
  uji_plagiat_tutup
  persetujuan_pembimbing_tutup
  skripsi_1_rangkap
  berkas_loa_jurnal
  transkrip_nilai_150
  berkas_persyaratan_yudisium
  other
}

enum ExamStatus {
  applicant
  pending
  scheduled
  completed
  passed
  failed
  cancelled
}

enum ExamType {
  proposal
  result
  final
  closing
  midterm
  other
}

enum ExpenseStatus {
  pending
  approved
  rejected
  paid
}

enum KkpDocumentType {
  application_letter
  proposal
  transcript
  acceptance_letter
  supervisor_letter
  report
  evaluation
  payment_proof_kkp_plus
  transcript_125_sks
  competency_certificate
  practicum_control_card
  falaq_practicum
  quran_reading_certificate
  academic_advisor_card
  dad_certificate
}

enum KkpRequirementType {
  payment_proof_kkp_plus
  transcript_125_sks
  competency_certificate
  practicum_control_card
  falaq_practicum
  quran_reading_certificate
  academic_advisor_card
  dad_certificate
}

enum KkpStatus {
  pending
  approved
  rejected
  in_progress
  completed
}

enum LabRegistrationStatus {
  pending
  approved
  rejected
  completed
  dropped
}

enum LabSessionStatus {
  scheduled
  ongoing
  completed
  cancelled
}

enum LabStatus {
  active
  inactive
  maintenance
}

enum LetterStatus {
  submitted
  in_review
  approved
  completed
  rejected
}

enum NotificationType {
  info
  warning
  error
  success
}

enum PaymentCategory {
  laboratory
  exam
  kkp
  tuition
  other
}

enum PaymentStatus {
  pending
  completed
  failed
  refunded
}

enum Role {
  mahasiswa
  dosen
  staff_tu
  prodi
  dekan
  admin
  laboratory_admin
  reading_room_admin
  admin_umum
  admin_keuangan
  gkm
  kepala_tata_usaha
}

enum StudentStatus {
  active
  inactive
  graduated
  dropped_out
  suspended
}

enum ThesisStatus {
  pending
  approved
  rejected
  archived
}
