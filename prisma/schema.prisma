generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model academic_consultations {
  id         String    @id
  date       DateTime
  uraian     String
  keterangan String
  paraf      Boolean   @default(false)
  studentId  String
  advisorId  String
  createdAt  DateTime  @default(now())
  updatedAt  DateTime
  lecturers  lecturers @relation(fields: [advisorId], references: [id])
  students   students  @relation(fields: [studentId], references: [id])
}

model academic_events {
  id          String      @id
  title       String
  description String?
  startDate   DateTime
  endDate     DateTime
  location    String?
  type        EventType
  examType    ExamType?
  status      EventStatus @default(confirmed)
  studentId   String?
  courseId    String?
  lecturerId  String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime
  courses     courses?    @relation(fields: [courseId], references: [id])
  lecturers   lecturers?  @relation(fields: [lecturerId], references: [id])
  students    students?   @relation(fields: [studentId], references: [id])
}

model accounts {
  id                String  @id
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  users             users   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model audit_logs {
  id        String   @id
  userId    String
  action    String
  resource  String
  details   Json?
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())
  users     users    @relation(fields: [userId], references: [id])
}

model book_borrowings {
  id         String          @id
  borrowDate DateTime        @default(now())
  dueDate    DateTime
  returnDate DateTime?
  status     BorrowingStatus @default(active)
  notes      String?
  fine       Decimal?        @db.Decimal(8, 2)
  bookId     String
  studentId  String
  books      books           @relation(fields: [bookId], references: [id])
  students   students        @relation(fields: [studentId], references: [id])
}

model book_categories {
  id          String  @id
  code        String  @unique
  name        String
  description String?
  isActive    Boolean @default(true)
  books       books[]
}

model books {
  id               String            @id
  title            String
  author           String
  publisher        String
  publicationYear  Int
  isbn             String            @unique
  categoryId       String
  coverImage       String?
  description      String?
  pageCount        Int?
  location         String
  status           BookStatus        @default(available)
  addedDate        DateTime          @default(now())
  lastBorrowedDate DateTime?
  borrowCount      Int               @default(0)
  book_borrowings  book_borrowings[]
  book_categories  book_categories   @relation(fields: [categoryId], references: [id])
}

model budget_allocations {
  id          String  @id
  budgetId    String
  department  String
  amount      Decimal @db.Decimal(12, 2)
  description String?
  budgets     budgets @relation(fields: [budgetId], references: [id], onDelete: Cascade)
}

model budgets {
  id                 String               @id
  name               String
  description        String?
  totalAmount        Decimal              @db.Decimal(15, 2)
  usedAmount         Decimal              @default(0) @db.Decimal(15, 2)
  category           String
  department         String?
  fiscalYear         String
  status             BudgetStatus         @default(active)
  createdAt          DateTime             @default(now())
  updatedAt          DateTime
  budget_allocations budget_allocations[]
  expenses           expenses[]
}

model companies {
  id               String             @id
  name             String
  address          String
  city             String
  province         String?
  postalCode       String?
  contactPerson    String
  contactPosition  String?
  contactEmail     String?
  contactPhone     String
  website          String?
  logo             String?
  industry         String
  description      String?
  isActive         Boolean            @default(true)
  kkp_applications kkp_applications[]
  kkp_locations    kkp_locations[]
}

model course_schedules {
  id           String  @id
  courseId     String
  day          String
  startTime    String
  endTime      String
  room         String
  building     String?
  semester     String
  academicYear String
  courses      courses @relation(fields: [courseId], references: [id], onDelete: Cascade)
}

model courses {
  id               String             @id
  code             String             @unique
  name             String
  description      String?
  credits          Int
  semester         Int
  department       String
  isActive         Boolean            @default(true)
  lecturerId       String?
  academic_events  academic_events[]
  course_schedules course_schedules[]
  lecturers        lecturers?         @relation(fields: [lecturerId], references: [id])
  grades           grades[]
}

model exam_applications {
  id                                                String            @id
  title                                             String
  type                                              ExamType
  status                                            ExamStatus        @default(pending)
  abstract                                          String?
  submissionDate                                    DateTime          @default(now())
  scheduledDate                                     DateTime?
  completionDate                                    DateTime?
  location                                          String?
  studentId                                         String
  advisor1Id                                        String?
  advisor2Id                                        String?
  createdAt                                         DateTime          @default(now())
  updatedAt                                         DateTime
  lecturers_exam_applications_advisor1IdTolecturers lecturers?        @relation("exam_applications_advisor1IdTolecturers", fields: [advisor1Id], references: [id])
  lecturers_exam_applications_advisor2IdTolecturers lecturers?        @relation("exam_applications_advisor2IdTolecturers", fields: [advisor2Id], references: [id])
  students                                          students          @relation(fields: [studentId], references: [id])
  exam_committees                                   exam_committees[]
  exam_documents                                    exam_documents[]
}

model exam_committees {
  id                String            @id
  examId            String
  lecturerId        String
  role              String
  exam_applications exam_applications @relation(fields: [examId], references: [id], onDelete: Cascade)
  lecturers         lecturers         @relation(fields: [lecturerId], references: [id])

  @@unique([examId, lecturerId])
}

model exam_documents {
  id                String            @id
  name              String
  type              ExamDocumentType
  status            DocumentStatus    @default(pending)
  uploadDate        DateTime          @default(now())
  verificationDate  DateTime?
  fileUrl           String
  fileSize          Int?
  notes             String?
  examId            String
  exam_applications exam_applications @relation(fields: [examId], references: [id], onDelete: Cascade)
}

model exam_requirements {
  id                        String                      @id
  examType                  ExamType
  title                     String
  description               String?
  required                  Boolean                     @default(true)
  order                     Int                         @default(0)
  createdAt                 DateTime                    @default(now())
  updatedAt                 DateTime
  exam_student_requirements exam_student_requirements[]
}

model exam_student_requirements {
  id                String            @id
  studentId         String
  requirementId     String
  completed         Boolean           @default(false)
  completedAt       DateTime?
  fileUrl           String?
  fileName          String?
  fileSize          Int?
  uploadedAt        DateTime?
  verifiedAt        DateTime?
  notes             String?
  exam_requirements exam_requirements @relation(fields: [requirementId], references: [id], onDelete: Cascade)
  students          students          @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@unique([studentId, requirementId])
}

model expenses {
  id          String        @id
  budgetId    String
  amount      Decimal       @db.Decimal(10, 2)
  description String
  category    String
  expenseDate DateTime
  receipt     String?
  status      ExpenseStatus @default(pending)
  approvedBy  String?
  approvedAt  DateTime?
  createdAt   DateTime      @default(now())
  budgets     budgets       @relation(fields: [budgetId], references: [id])
}

model file_uploads {
  id           String   @id
  filename     String
  originalName String
  path         String
  size         Int
  mimeType     String
  uploadedBy   String
  category     String?
  createdAt    DateTime @default(now())
}

model grades {
  id           String   @id
  score        Float
  letterGrade  String
  semester     String
  academicYear String
  studentId    String
  courseId     String
  createdAt    DateTime @default(now())
  courses      courses  @relation(fields: [courseId], references: [id])
  students     students @relation(fields: [studentId], references: [id])

  @@unique([studentId, courseId, semester, academicYear])
}

model kkp_applications {
  id                String          @id
  applicationNumber String          @unique
  title             String
  description       String
  submissionDate    DateTime        @default(now())
  startDate         DateTime
  endDate           DateTime
  status            KkpStatus       @default(pending)
  notes             String?
  studentId         String
  groupMembers      Json?
  supervisorId      String?
  companyId         String
  createdAt         DateTime        @default(now())
  updatedAt         DateTime
  companies         companies       @relation(fields: [companyId], references: [id])
  students          students        @relation(fields: [studentId], references: [id])
  lecturers         lecturers?      @relation(fields: [supervisorId], references: [id])
  kkp_approvals     kkp_approvals[]
  kkp_documents     kkp_documents[]
}

model kkp_approvals {
  id               String           @id
  applicationId    String
  approverRole     String
  approverId       String?
  status           ApprovalStatus
  comments         String?
  approvedAt       DateTime?
  kkp_applications kkp_applications @relation(fields: [applicationId], references: [id], onDelete: Cascade)
}

model kkp_documents {
  id               String            @id
  name             String
  type             KkpDocumentType
  url              String
  uploadDate       DateTime          @default(now())
  status           DocumentStatus    @default(pending)
  notes            String?
  fileSize         Int?
  mimeType         String?
  applicationId    String?
  locationId       String?
  kkp_applications kkp_applications? @relation(fields: [applicationId], references: [id], onDelete: Cascade)
  kkp_locations    kkp_locations?    @relation(fields: [locationId], references: [id], onDelete: Cascade)
}

model kkp_locations {
  id                String              @id
  name              String
  address           String
  city              String
  province          String?
  industry          String
  positions         Json
  quota             Int                 @default(0)
  remaining         Int                 @default(0)
  status            String              @default("available")
  distance          Float?
  contactPerson     String?
  contactEmail      String?
  contactPhone      String?
  description       String?
  isActive          Boolean             @default(true)
  companyId         String?
  createdById       String
  createdAt         DateTime            @default(now())
  updatedAt         DateTime
  kkp_documents     kkp_documents[]
  companies         companies?          @relation(fields: [companyId], references: [id])
  students          students            @relation(fields: [createdById], references: [id])
  kkp_sub_locations kkp_sub_locations[]

  @@unique([name, address])
}

model kkp_requirements {
  id               String             @id
  studentId        String
  requirementType  KkpRequirementType
  fileName         String
  originalFileName String
  filePath         String
  fileSize         Int
  mimeType         String             @default("application/pdf")
  status           DocumentStatus     @default(pending)
  notes            String?
  uploadedAt       DateTime           @default(now())
  verifiedAt       DateTime?
  verifiedBy       String?
  createdAt        DateTime           @default(now())
  updatedAt        DateTime
  students         students           @relation(fields: [studentId], references: [id])

  @@unique([studentId, requirementType])
}

model kkp_sub_locations {
  id            String        @id
  name          String
  address       String
  contactPerson String
  contactEmail  String?
  contactPhone  String?
  locationId    String
  createdAt     DateTime      @default(now())
  updatedAt     DateTime
  kkp_locations kkp_locations @relation(fields: [locationId], references: [id], onDelete: Cascade)
}

model lab_announcements {
  id           String       @id
  title        String
  content      String
  isImportant  Boolean      @default(false)
  laboratoryId String
  createdAt    DateTime     @default(now())
  updatedAt    DateTime
  laboratories laboratories @relation(fields: [laboratoryId], references: [id])
}

model lab_assignment_submissions {
  id                String            @id
  submittedAt       DateTime          @default(now())
  score             Float?
  feedback          String?
  fileUrl           String?
  studentId         String
  assignmentId      String
  registrationId    String
  createdAt         DateTime          @default(now())
  updatedAt         DateTime
  lab_assignments   lab_assignments   @relation(fields: [assignmentId], references: [id])
  lab_registrations lab_registrations @relation(fields: [registrationId], references: [id])
  students          students          @relation(fields: [studentId], references: [id])

  @@unique([studentId, assignmentId])
}

model lab_assignments {
  id                         String                       @id
  title                      String
  description                String
  dueDate                    DateTime
  maxScore                   Float                        @default(100)
  laboratoryId               String
  createdAt                  DateTime                     @default(now())
  updatedAt                  DateTime
  lab_assignment_submissions lab_assignment_submissions[]
  laboratories               laboratories                 @relation(fields: [laboratoryId], references: [id])
}

model lab_materials {
  id           String       @id
  title        String
  description  String?
  type         String
  fileUrl      String?
  externalUrl  String?
  laboratoryId String
  createdAt    DateTime     @default(now())
  updatedAt    DateTime
  laboratories laboratories @relation(fields: [laboratoryId], references: [id])
}

model lab_registrations {
  id                         String                       @id
  status                     LabRegistrationStatus        @default(pending)
  registeredAt               DateTime                     @default(now())
  completedAt                DateTime?
  progress                   Float                        @default(0)
  grade                      String?
  studentId                  String
  laboratoryId               String
  createdAt                  DateTime                     @default(now())
  updatedAt                  DateTime
  lab_assignment_submissions lab_assignment_submissions[]
  laboratories               laboratories                 @relation(fields: [laboratoryId], references: [id])
  students                   students                     @relation(fields: [studentId], references: [id])

  @@unique([studentId, laboratoryId])
}

model lab_sessions {
  id           String           @id
  title        String
  description  String?
  sessionDate  DateTime
  startTime    String
  endTime      String
  location     String?
  status       LabSessionStatus @default(scheduled)
  laboratoryId String
  createdAt    DateTime         @default(now())
  updatedAt    DateTime
  laboratories laboratories     @relation(fields: [laboratoryId], references: [id])
}

model laboratories {
  id                String              @id
  code              String              @unique
  name              String
  description       String?
  image             String?
  capacity          Int
  credits           Int
  semester          String
  department        String
  location          String
  category          String
  status            LabStatus           @default(active)
  instructorId      String?
  createdAt         DateTime            @default(now())
  updatedAt         DateTime
  lab_announcements lab_announcements[]
  lab_assignments   lab_assignments[]
  lab_materials     lab_materials[]
  lab_registrations lab_registrations[]
  lab_sessions      lab_sessions[]
  lecturers         lecturers?          @relation(fields: [instructorId], references: [id])
}

model lecturers {
  id                                                        String                   @id
  userId                                                    String                   @unique
  nip                                                       String                   @unique
  department                                                String
  position                                                  String
  specialization                                            String?
  phone                                                     String?
  office                                                    String?
  academic_consultations                                    academic_consultations[]
  academic_events                                           academic_events[]
  courses                                                   courses[]
  exam_applications_exam_applications_advisor1IdTolecturers exam_applications[]      @relation("exam_applications_advisor1IdTolecturers")
  exam_applications_exam_applications_advisor2IdTolecturers exam_applications[]      @relation("exam_applications_advisor2IdTolecturers")
  exam_committees                                           exam_committees[]
  kkp_applications                                          kkp_applications[]
  laboratories                                              laboratories[]
  users                                                     users                    @relation(fields: [userId], references: [id], onDelete: Cascade)
  students                                                  students[]
  thesis_titles                                             thesis_titles[]
}

model letter_attachments {
  id              String          @id
  name            String
  uploadDate      DateTime        @default(now())
  url             String
  fileSize        Int?
  mimeType        String?
  requestId       String
  letter_requests letter_requests @relation(fields: [requestId], references: [id], onDelete: Cascade)
}

model letter_requests {
  id                 String               @id
  type               String
  title              String
  purpose            String
  description        String
  status             LetterStatus         @default(submitted)
  requestDate        DateTime             @default(now())
  approvedDate       DateTime?
  completedDate      DateTime?
  rejectedReason     String?
  additionalInfo     Json?
  studentId          String
  approvalRole       ApprovalRole
  approvedBy         String?
  generatedLetter    String?
  letterNumber       String?
  createdAt          DateTime             @default(now())
  updatedAt          DateTime
  letter_attachments letter_attachments[]
  students           students             @relation(fields: [studentId], references: [id])
}

model letter_types {
  id                String       @id
  title             String       @unique
  description       String
  approvalRole      ApprovalRole
  estimatedDays     Int
  requiredDocuments String[]
  additionalFields  Json?
  isActive          Boolean      @default(true)
  template          String?
}

model notifications {
  id        String           @id
  userId    String
  title     String
  message   String
  type      NotificationType @default(info)
  isRead    Boolean          @default(false)
  data      Json?
  createdAt DateTime         @default(now())
  readAt    DateTime?
}

model payment_items {
  id           String          @id
  name         String
  description  String?
  amount       Decimal         @db.Decimal(10, 2)
  category     PaymentCategory
  semester     String
  academicYear String
  dueDate      DateTime
  isRequired   Boolean         @default(true)
  isRecurring  Boolean         @default(false)
  paymentId    String?
  createdAt    DateTime        @default(now())
  payments     payments?       @relation(fields: [paymentId], references: [id])
}

model payments {
  id            String          @id
  amount        Decimal         @db.Decimal(12, 2)
  description   String
  category      PaymentCategory
  status        PaymentStatus   @default(pending)
  dueDate       DateTime
  paidDate      DateTime?
  semester      String
  academicYear  String
  receiptNumber String?
  paymentMethod String?
  notes         String?
  studentId     String
  createdAt     DateTime        @default(now())
  updatedAt     DateTime
  payment_items payment_items[]
  students      students        @relation(fields: [studentId], references: [id])
}

model sessions {
  id        String   @id
  userId    String
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
  users     users    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model staff {
  id         String  @id
  userId     String  @unique
  nip        String? @unique
  department String
  position   String
  phone      String?
  office     String?
  users      users   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model students {
  id                         String                       @id
  userId                     String                       @unique
  nim                        String                       @unique
  major                      String
  department                 String
  semester                   Int
  academicYear               String
  phone                      String?
  address                    String?
  guardian                   Json?
  enrollDate                 DateTime
  status                     StudentStatus                @default(active)
  gpa                        Float?
  academicAdvisorId          String?
  academic_consultations     academic_consultations[]
  academic_events            academic_events[]
  book_borrowings            book_borrowings[]
  exam_applications          exam_applications[]
  exam_student_requirements  exam_student_requirements[]
  grades                     grades[]
  kkp_applications           kkp_applications[]
  kkp_locations              kkp_locations[]
  kkp_requirements           kkp_requirements[]
  lab_assignment_submissions lab_assignment_submissions[]
  lab_registrations          lab_registrations[]
  letter_requests            letter_requests[]
  payments                   payments[]
  lecturers                  lecturers?                   @relation(fields: [academicAdvisorId], references: [id])
  users                      users                        @relation(fields: [userId], references: [id], onDelete: Cascade)
  thesis_titles              thesis_titles[]
}

model system_configs {
  id          String   @id
  key         String   @unique
  value       String
  description String?
  category    String?
  updatedAt   DateTime
}

model thesis_archives {
  id            String        @id
  thesisId      String        @unique
  archiveDate   DateTime      @default(now())
  location      String
  physicalId    String?
  digitalId     String?
  notes         String?
  thesis_titles thesis_titles @relation(fields: [thesisId], references: [id], onDelete: Cascade)
}

model thesis_reviews {
  id            String        @id
  thesisId      String
  reviewerId    String
  action        String
  comments      String?
  reviewDate    DateTime      @default(now())
  thesis_titles thesis_titles @relation(fields: [thesisId], references: [id], onDelete: Cascade)
}

model thesis_similarities {
  id                                                              String        @id
  sourceThesisId                                                  String
  targetThesisId                                                  String
  similarityPercentage                                            Float
  thesis_titles_thesis_similarities_sourceThesisIdTothesis_titles thesis_titles @relation("thesis_similarities_sourceThesisIdTothesis_titles", fields: [sourceThesisId], references: [id], onDelete: Cascade)
  thesis_titles_thesis_similarities_targetThesisIdTothesis_titles thesis_titles @relation("thesis_similarities_targetThesisIdTothesis_titles", fields: [targetThesisId], references: [id], onDelete: Cascade)

  @@unique([sourceThesisId, targetThesisId])
}

model thesis_titles {
  id                                                                    String                @id
  title                                                                 String
  abstract                                                              String
  keywords                                                              String[]
  submissionDate                                                        DateTime              @default(now())
  status                                                                ThesisStatus          @default(pending)
  year                                                                  Int
  similarityScore                                                       Float?
  digitalCopy                                                           Boolean               @default(false)
  documentUrl                                                           String?
  externalLink                                                          String?
  authorId                                                              String
  supervisorId                                                          String?
  department                                                            String
  createdAt                                                             DateTime              @default(now())
  updatedAt                                                             DateTime
  thesis_archives                                                       thesis_archives?
  thesis_reviews                                                        thesis_reviews[]
  thesis_similarities_thesis_similarities_sourceThesisIdTothesis_titles thesis_similarities[] @relation("thesis_similarities_sourceThesisIdTothesis_titles")
  thesis_similarities_thesis_similarities_targetThesisIdTothesis_titles thesis_similarities[] @relation("thesis_similarities_targetThesisIdTothesis_titles")
  students                                                              students              @relation(fields: [authorId], references: [id])
  lecturers                                                             lecturers?            @relation(fields: [supervisorId], references: [id])
}

model users {
  id         String       @id
  username   String       @unique(map: "users_nidn_key")
  password   String
  name       String
  avatar     String?
  role       Role         @default(mahasiswa)
  subRole    String?
  isActive   Boolean      @default(true)
  createdAt  DateTime     @default(now())
  updatedAt  DateTime
  accounts   accounts[]
  audit_logs audit_logs[]
  lecturers  lecturers?
  sessions   sessions[]
  staff      staff?
  students   students?
}

model verification_tokens {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum ApprovalRole {
  staff_tu
  prodi
  dekan
  none
}

enum ApprovalStatus {
  pending
  approved
  rejected
}

enum BookStatus {
  available
  borrowed
  reserved
  maintenance
}

enum BorrowingStatus {
  active
  returned
  overdue
  lost
}

enum BudgetStatus {
  active
  inactive
  closed
}

enum DocumentStatus {
  pending
  verified
  rejected
}

enum EventStatus {
  confirmed
  pending
  cancelled
  completed
}

enum EventType {
  exam
  class
  lab
  consultation
  seminar
  workshop
  deadline
  organization
}

enum ExamDocumentType {
  payment_proof
  transcript
  proposal
  supervisor_approval
  pembayaran_bpp
  biaya_komprehensif
  surat_sk_pembimbing
  surat_penyelesaian_kkp
  transkrip_nilai_145
  praktikum_ilmu_falaq
  surat_publikasi_produk
  bukti_publish_produk
  surat_baca_alquran
  sertifikat_dad
  uji_plagiat_skripsi
  kartu_kontrol_seminar
  persetujuan_pembimbing
  biaya_ujian_seminar
  transkrip_nilai_hasil
  sertifikat_praktikum
  uji_plagiat_hasil
  persetujuan_pembimbing_hasil
  skripsi_6_rangkap
  pembayaran_ujian
  biaya_tambahan_wd2
  pembayaran_wisuda_perpustakaan
  uji_plagiat_tutup
  persetujuan_pembimbing_tutup
  skripsi_1_rangkap
  berkas_loa_jurnal
  transkrip_nilai_150
  berkas_persyaratan_yudisium
  other
}

enum ExamStatus {
  applicant
  pending
  scheduled
  completed
  passed
  failed
  cancelled
}

enum ExamType {
  proposal
  result
  final
  closing
  midterm
  other
}

enum ExpenseStatus {
  pending
  approved
  rejected
  paid
}

enum KkpDocumentType {
  application_letter
  proposal
  transcript
  acceptance_letter
  supervisor_letter
  report
  evaluation
  payment_proof_kkp_plus
  transcript_125_sks
  competency_certificate
  practicum_control_card
  falaq_practicum
  quran_reading_certificate
  academic_advisor_card
  dad_certificate
}

enum KkpRequirementType {
  payment_proof_kkp_plus
  transcript_125_sks
  competency_certificate
  practicum_control_card
  falaq_practicum
  quran_reading_certificate
  academic_advisor_card
  dad_certificate
}

enum KkpStatus {
  pending
  approved
  rejected
  in_progress
  completed
}

enum LabRegistrationStatus {
  pending
  approved
  rejected
  completed
  dropped
}

enum LabSessionStatus {
  scheduled
  ongoing
  completed
  cancelled
}

enum LabStatus {
  active
  inactive
  maintenance
}

enum LetterStatus {
  submitted
  in_review
  approved
  completed
  rejected
}

enum NotificationType {
  info
  warning
  error
  success
}

enum PaymentCategory {
  laboratory
  exam
  kkp
  tuition
  other
}

enum PaymentStatus {
  pending
  completed
  failed
  refunded
}

enum Role {
  mahasiswa
  dosen
  staff_tu
  prodi
  dekan
  admin
  laboratory_admin
  reading_room_admin
  admin_umum
  admin_keuangan
  gkm
  kepala_tata_usaha
}

enum StudentStatus {
  active
  inactive
  graduated
  dropped_out
  suspended
}

enum ThesisStatus {
  pending
  approved
  rejected
  archived
}
