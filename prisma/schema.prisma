generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String     @id @default(cuid()) @map("id")
  username   String     @unique @map("username")
  password   String     @map("password")
  name       String     @map("name")
  avatar     String?    @map("avatar")
  role       Role       @default(mahasiswa) @map("role")
  subRole    String?
  isActive   Boolean    @default(true)
  createdAt  DateTime   @default(now())
  updatedAt  DateTime
  accounts   Account[]
  audit_logs AuditLog[]
  lecturers  Lecturer?
  sessions   Session[]
  staff      Staff?
  students   Student?

  @@map("users")
}

model Session {
  id        String   @id @default(cuid()) @map("id")
  userId    String
  token     String   @unique @map("token")
  expiresAt DateTime
  createdAt DateTime @default(now())
  users     User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model AuditLog {
  id        String   @id @default(cuid()) @map("id")
  userId    String
  action    String   @map("action")
  resource  String   @map("resource")
  details   Json?    @map("details")
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())
  users     User     @relation(fields: [userId], references: [id])

  @@map("audit_logs")
}

model Student {
  id                         String                    @id @default(cuid()) @map("id")
  userId                     String                    @unique
  nim                        String                    @unique @map("nim")
  major                      String                    @map("major")
  department                 String                    @map("department")
  semester                   Int                       @map("semester")
  academicYear               String
  phone                      String?                   @map("phone")
  address                    String?                   @map("address")
  guardian                   Json?                     @map("guardian")
  enrollDate                 DateTime
  status                     StudentStatus             @default(active) @map("status")
  gpa                        Float?                    @map("gpa")
  academicAdvisorId          String?
  lastSyncAt                 DateTime?                 @map("last_sync_at")
  academic_consultations     AcademicConsultation[]
  academic_events            AcademicEvent[]
  book_borrowings            BookBorrowing[]
  exam_applications          ExamApplication[]
  exam_student_requirements  ExamStudentRequirement[]
  grades                     Grade[]
  kkp_applications           KkpApplication[]
  kkp_locations              KkpLocation[]
  kkp_requirements           KkpRequirement[]
  lab_assignment_submissions LabAssignmentSubmission[]
  lab_registrations          LabRegistration[]
  letter_requests            LetterRequest[]
  payments                   Payment[]
  lecturers                  Lecturer?                 @relation(fields: [academicAdvisorId], references: [id])
  users                      User                      @relation(fields: [userId], references: [id], onDelete: Cascade)
  thesis_titles              ThesisTitle[]

  @@map("students")
}

model Lecturer {
  id                                                        String                 @id @default(cuid()) @map("id")
  userId                                                    String                 @unique
  nip                                                       String                 @unique @map("nip")
  department                                                String                 @map("department")
  position                                                  String                 @map("position")
  specialization                                            String?                @map("specialization")
  phone                                                     String?                @map("phone")
  office                                                    String?                @map("office")
  email                                                     String?                @map("email")
  lastSyncAt                                                DateTime?              @map("last_sync_at")
  academic_consultations                                    AcademicConsultation[]
  academic_events                                           AcademicEvent[]
  courses                                                   Course[]
  exam_applications_exam_applications_advisor1IdTolecturers ExamApplication[]      @relation("exam_applications_advisor1IdTolecturers")
  exam_applications_exam_applications_advisor2IdTolecturers ExamApplication[]      @relation("exam_applications_advisor2IdTolecturers")
  exam_committees                                           ExamCommittee[]
  kkp_applications                                          KkpApplication[]
  laboratories                                              Laboratory[]
  users                                                     User                   @relation(fields: [userId], references: [id], onDelete: Cascade)
  students                                                  Student[]
  thesis_titles                                             ThesisTitle[]

  @@map("lecturers")
}

model Staff {
  id         String  @id @default(cuid()) @map("id")
  userId     String  @unique
  nip        String? @unique @map("nip")
  department String  @map("department")
  position   String  @map("position")
  phone      String? @map("phone")
  office     String? @map("office")
  users      User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("staff")
}

model KkpApplication {
  id                String        @id @default(cuid()) @map("id")
  applicationNumber String        @unique
  title             String        @map("title")
  description       String        @map("description")
  submissionDate    DateTime      @default(now())
  startDate         DateTime
  endDate           DateTime
  status            KkpStatus     @default(pending) @map("status")
  notes             String?       @map("notes")
  studentId         String
  groupMembers      Json?
  supervisorId      String?
  companyId         String
  createdAt         DateTime      @default(now())
  updatedAt         DateTime
  companies         Company       @relation(fields: [companyId], references: [id])
  students          Student       @relation(fields: [studentId], references: [id])
  lecturers         Lecturer?     @relation(fields: [supervisorId], references: [id])
  kkp_approvals     KkpApproval[]
  kkp_documents     KkpDocument[]

  @@map("kkp_applications")
}

model Company {
  id               String           @id @default(cuid()) @map("id")
  name             String           @map("name")
  address          String           @map("address")
  city             String           @map("city")
  province         String?          @map("province")
  postalCode       String?
  contactPerson    String
  contactPosition  String?
  contactEmail     String?
  contactPhone     String
  website          String?          @map("website")
  logo             String?          @map("logo")
  industry         String           @map("industry")
  description      String?          @map("description")
  isActive         Boolean          @default(true)
  kkp_applications KkpApplication[]
  kkp_locations    KkpLocation[]

  @@map("companies")
}

model KkpLocation {
  id                String           @id @default(cuid()) @map("id")
  name              String           @map("name")
  address           String           @map("address")
  city              String           @map("city")
  province          String?          @map("province")
  industry          String           @map("industry")
  positions         Json             @map("positions")
  quota             Int              @default(0) @map("quota")
  remaining         Int              @default(0) @map("remaining")
  status            String           @default("available") @map("status")
  distance          Float?           @map("distance")
  contactPerson     String?
  contactEmail      String?
  contactPhone      String?
  description       String?          @map("description")
  isActive          Boolean          @default(true)
  companyId         String?
  createdById       String
  createdAt         DateTime         @default(now())
  updatedAt         DateTime
  kkp_documents     KkpDocument[]
  companies         Company?         @relation(fields: [companyId], references: [id])
  students          Student          @relation(fields: [createdById], references: [id])
  kkp_sub_locations KkpSubLocation[]

  @@unique([name, address])
  @@map("kkp_locations")
}

model KkpSubLocation {
  id            String      @id @default(cuid()) @map("id")
  name          String      @map("name")
  address       String      @map("address")
  contactPerson String
  contactEmail  String?
  contactPhone  String?
  locationId    String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime
  kkp_locations KkpLocation @relation(fields: [locationId], references: [id], onDelete: Cascade)

  @@map("kkp_sub_locations")
}

model KkpDocument {
  id               String          @id @default(cuid()) @map("id")
  name             String          @map("name")
  type             KkpDocumentType @map("type")
  url              String          @map("url")
  uploadDate       DateTime        @default(now())
  status           DocumentStatus  @default(pending) @map("status")
  notes            String?         @map("notes")
  fileSize         Int?
  mimeType         String?
  applicationId    String?
  locationId       String?
  kkp_applications KkpApplication? @relation(fields: [applicationId], references: [id], onDelete: Cascade)
  kkp_locations    KkpLocation?    @relation(fields: [locationId], references: [id], onDelete: Cascade)

  @@map("kkp_documents")
}

model KkpApproval {
  id               String         @id @default(cuid()) @map("id")
  applicationId    String
  approverRole     String
  approverId       String?
  status           ApprovalStatus @map("status")
  comments         String?        @map("comments")
  approvedAt       DateTime?
  kkp_applications KkpApplication @relation(fields: [applicationId], references: [id], onDelete: Cascade)

  @@map("kkp_approvals")
}

model KkpRequirement {
  id               String             @id @default(cuid()) @map("id")
  studentId        String
  requirementType  KkpRequirementType
  fileName         String
  originalFileName String
  filePath         String
  fileSize         Int
  mimeType         String             @default("application/pdf")
  status           DocumentStatus     @default(pending) @map("status")
  notes            String?            @map("notes")
  uploadedAt       DateTime           @default(now())
  verifiedAt       DateTime?
  verifiedBy       String?
  createdAt        DateTime           @default(now())
  updatedAt        DateTime
  students         Student            @relation(fields: [studentId], references: [id])

  @@unique([studentId, requirementType])
  @@map("kkp_requirements")
}

model ExamApplication {
  id                                                String          @id @default(cuid()) @map("id")
  title                                             String          @map("title")
  type                                              ExamType        @map("type")
  status                                            ExamStatus      @default(pending) @map("status")
  abstract                                          String?         @map("abstract")
  submissionDate                                    DateTime        @default(now())
  scheduledDate                                     DateTime?
  completionDate                                    DateTime?
  location                                          String?         @map("location")
  studentId                                         String
  advisor1Id                                        String?
  advisor2Id                                        String?
  createdAt                                         DateTime        @default(now())
  updatedAt                                         DateTime
  lecturers_exam_applications_advisor1IdTolecturers Lecturer?       @relation("exam_applications_advisor1IdTolecturers", fields: [advisor1Id], references: [id])
  lecturers_exam_applications_advisor2IdTolecturers Lecturer?       @relation("exam_applications_advisor2IdTolecturers", fields: [advisor2Id], references: [id])
  students                                          Student         @relation(fields: [studentId], references: [id])
  exam_committees                                   ExamCommittee[]
  exam_documents                                    ExamDocument[]

  @@map("exam_applications")
}

model ExamCommittee {
  id                String          @id @default(cuid()) @map("id")
  examId            String
  lecturerId        String
  role              String          @map("role")
  exam_applications ExamApplication @relation(fields: [examId], references: [id], onDelete: Cascade)
  lecturers         Lecturer        @relation(fields: [lecturerId], references: [id])

  @@unique([examId, lecturerId])
  @@map("exam_committees")
}

model ExamDocument {
  id                String           @id @default(cuid()) @map("id")
  name              String           @map("name")
  type              ExamDocumentType @map("type")
  status            DocumentStatus   @default(pending) @map("status")
  uploadDate        DateTime         @default(now())
  verificationDate  DateTime?
  fileUrl           String
  fileSize          Int?
  notes             String?          @map("notes")
  examId            String
  exam_applications ExamApplication  @relation(fields: [examId], references: [id], onDelete: Cascade)

  @@map("exam_documents")
}

model ExamRequirement {
  id                        String                   @id @default(cuid()) @map("id")
  examType                  ExamType
  title                     String                   @map("title")
  description               String?                  @map("description")
  required                  Boolean                  @default(true) @map("required")
  order                     Int                      @default(0) @map("order")
  createdAt                 DateTime                 @default(now())
  updatedAt                 DateTime
  exam_student_requirements ExamStudentRequirement[]

  @@map("exam_requirements")
}

model ExamStudentRequirement {
  id                String          @id @default(cuid()) @map("id")
  studentId         String
  requirementId     String
  completed         Boolean         @default(false) @map("completed")
  completedAt       DateTime?
  fileUrl           String?
  fileName          String?
  fileSize          Int?
  uploadedAt        DateTime?
  verifiedAt        DateTime?
  notes             String?         @map("notes")
  exam_requirements ExamRequirement @relation(fields: [requirementId], references: [id], onDelete: Cascade)
  students          Student         @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@unique([studentId, requirementId])
  @@map("exam_student_requirements")
}

model ThesisTitle {
  id                                                                    String             @id @default(cuid()) @map("id")
  title                                                                 String             @map("title")
  abstract                                                              String             @map("abstract")
  keywords                                                              String[]           @map("keywords")
  submissionDate                                                        DateTime           @default(now())
  status                                                                ThesisStatus       @default(pending) @map("status")
  year                                                                  Int                @map("year")
  similarityScore                                                       Float?
  digitalCopy                                                           Boolean            @default(false)
  documentUrl                                                           String?
  externalLink                                                          String?
  authorId                                                              String
  supervisorId                                                          String?
  department                                                            String             @map("department")
  createdAt                                                             DateTime           @default(now())
  updatedAt                                                             DateTime
  thesis_archives                                                       ThesisArchive?
  thesis_reviews                                                        ThesisReview[]
  thesis_similarities_thesis_similarities_sourceThesisIdTothesis_titles ThesisSimilarity[] @relation("thesis_similarities_sourceThesisIdTothesis_titles")
  thesis_similarities_thesis_similarities_targetThesisIdTothesis_titles ThesisSimilarity[] @relation("thesis_similarities_targetThesisIdTothesis_titles")
  students                                                              Student            @relation(fields: [authorId], references: [id])
  lecturers                                                             Lecturer?          @relation(fields: [supervisorId], references: [id])

  @@map("thesis_titles")
}

model ThesisSimilarity {
  id                                                              String      @id @default(cuid()) @map("id")
  sourceThesisId                                                  String
  targetThesisId                                                  String
  similarityPercentage                                            Float
  thesis_titles_thesis_similarities_sourceThesisIdTothesis_titles ThesisTitle @relation("thesis_similarities_sourceThesisIdTothesis_titles", fields: [sourceThesisId], references: [id], onDelete: Cascade)
  thesis_titles_thesis_similarities_targetThesisIdTothesis_titles ThesisTitle @relation("thesis_similarities_targetThesisIdTothesis_titles", fields: [targetThesisId], references: [id], onDelete: Cascade)

  @@unique([sourceThesisId, targetThesisId])
  @@map("thesis_similarities")
}

model ThesisReview {
  id            String      @id @default(cuid()) @map("id")
  thesisId      String
  reviewerId    String
  action        String      @map("action")
  comments      String?     @map("comments")
  reviewDate    DateTime    @default(now())
  thesis_titles ThesisTitle @relation(fields: [thesisId], references: [id], onDelete: Cascade)

  @@map("thesis_reviews")
}

model ThesisArchive {
  id            String      @id @default(cuid()) @map("id")
  thesisId      String      @unique
  archiveDate   DateTime    @default(now())
  location      String      @map("location")
  physicalId    String?
  digitalId     String?
  notes         String?     @map("notes")
  thesis_titles ThesisTitle @relation(fields: [thesisId], references: [id], onDelete: Cascade)

  @@map("thesis_archives")
}

model Payment {
  id            String          @id @default(cuid()) @map("id")
  amount        Decimal         @map("amount") @db.Decimal(12, 2)
  description   String          @map("description")
  category      PaymentCategory @map("category")
  status        PaymentStatus   @default(pending) @map("status")
  dueDate       DateTime
  paidDate      DateTime?
  semester      String          @map("semester")
  academicYear  String
  receiptNumber String?
  paymentMethod String?
  notes         String?         @map("notes")
  studentId     String
  createdAt     DateTime        @default(now())
  updatedAt     DateTime
  payment_items PaymentItem[]
  students      Student         @relation(fields: [studentId], references: [id])

  @@map("payments")
}

model PaymentItem {
  id           String          @id @default(cuid()) @map("id")
  name         String          @map("name")
  description  String?         @map("description")
  amount       Decimal         @map("amount") @db.Decimal(10, 2)
  category     PaymentCategory @map("category")
  semester     String          @map("semester")
  academicYear String
  dueDate      DateTime
  isRequired   Boolean         @default(true)
  isRecurring  Boolean         @default(false)
  paymentId    String?
  createdAt    DateTime        @default(now())
  payments     Payment?        @relation(fields: [paymentId], references: [id])

  @@map("payment_items")
}

model Budget {
  id                 String             @id @default(cuid()) @map("id")
  name               String             @map("name")
  description        String?            @map("description")
  totalAmount        Decimal            @db.Decimal(15, 2)
  usedAmount         Decimal            @default(0) @db.Decimal(15, 2)
  category           String             @map("category")
  department         String?            @map("department")
  fiscalYear         String
  status             BudgetStatus       @default(active) @map("status")
  createdAt          DateTime           @default(now())
  updatedAt          DateTime
  budget_allocations BudgetAllocation[]
  expenses           Expense[]

  @@map("budgets")
}

model BudgetAllocation {
  id          String  @id @default(cuid()) @map("id")
  budgetId    String
  department  String  @map("department")
  amount      Decimal @map("amount") @db.Decimal(12, 2)
  description String? @map("description")
  budgets     Budget  @relation(fields: [budgetId], references: [id], onDelete: Cascade)

  @@map("budget_allocations")
}

model Expense {
  id          String        @id @default(cuid()) @map("id")
  budgetId    String
  amount      Decimal       @map("amount") @db.Decimal(10, 2)
  description String        @map("description")
  category    String        @map("category")
  expenseDate DateTime
  receipt     String?       @map("receipt")
  status      ExpenseStatus @default(pending) @map("status")
  approvedBy  String?
  approvedAt  DateTime?
  createdAt   DateTime      @default(now())
  budgets     Budget        @relation(fields: [budgetId], references: [id])

  @@map("expenses")
}

model LetterRequest {
  id                 String             @id @default(cuid()) @map("id")
  type               String             @map("type")
  title              String             @map("title")
  purpose            String             @map("purpose")
  description        String             @map("description")
  status             LetterStatus       @default(submitted) @map("status")
  requestDate        DateTime           @default(now())
  approvedDate       DateTime?
  completedDate      DateTime?
  rejectedReason     String?
  additionalInfo     Json?
  studentId          String
  approvalRole       ApprovalRole
  approvedBy         String?
  generatedLetter    String?
  letterNumber       String?
  createdAt          DateTime           @default(now())
  updatedAt          DateTime
  letter_attachments LetterAttachment[]
  students           Student            @relation(fields: [studentId], references: [id])

  @@map("letter_requests")
}

model LetterAttachment {
  id              String        @id @default(cuid()) @map("id")
  name            String        @map("name")
  uploadDate      DateTime      @default(now())
  url             String        @map("url")
  fileSize        Int?
  mimeType        String?
  requestId       String
  letter_requests LetterRequest @relation(fields: [requestId], references: [id], onDelete: Cascade)

  @@map("letter_attachments")
}

model LetterType {
  id                String       @id @default(cuid()) @map("id")
  title             String       @unique @map("title")
  description       String       @map("description")
  approvalRole      ApprovalRole
  estimatedDays     Int
  requiredDocuments String[]
  additionalFields  Json?
  isActive          Boolean      @default(true)
  template          String?      @map("template")

  @@map("letter_types")
}

model Book {
  id               String          @id @default(cuid()) @map("id")
  title            String          @map("title")
  author           String          @map("author")
  publisher        String          @map("publisher")
  publicationYear  Int
  isbn             String          @unique @map("isbn")
  categoryId       String
  coverImage       String?
  description      String?         @map("description")
  pageCount        Int?
  location         String          @map("location")
  status           BookStatus      @default(available) @map("status")
  addedDate        DateTime        @default(now())
  lastBorrowedDate DateTime?
  borrowCount      Int             @default(0)
  book_borrowings  BookBorrowing[]
  book_categories  BookCategory    @relation(fields: [categoryId], references: [id])

  @@map("books")
}

model BookCategory {
  id          String  @id @default(cuid()) @map("id")
  code        String  @unique @map("code")
  name        String  @map("name")
  description String? @map("description")
  isActive    Boolean @default(true)
  books       Book[]

  @@map("book_categories")
}

model BookBorrowing {
  id         String          @id @default(cuid()) @map("id")
  borrowDate DateTime        @default(now())
  dueDate    DateTime
  returnDate DateTime?
  status     BorrowingStatus @default(active) @map("status")
  notes      String?         @map("notes")
  fine       Decimal?        @map("fine") @db.Decimal(8, 2)
  bookId     String
  studentId  String
  books      Book            @relation(fields: [bookId], references: [id])
  students   Student         @relation(fields: [studentId], references: [id])

  @@map("book_borrowings")
}

model Course {
  id               String           @id @default(cuid()) @map("id")
  code             String           @unique @map("code")
  name             String           @map("name")
  description      String?          @map("description")
  credits          Int              @map("credits")
  semester         Int              @map("semester")
  department       String           @map("department")
  isActive         Boolean          @default(true)
  lecturerId       String?
  academic_events  AcademicEvent[]
  course_schedules CourseSchedule[]
  lecturers        Lecturer?        @relation(fields: [lecturerId], references: [id])
  grades           Grade[]

  @@map("courses")
}

model Grade {
  id           String   @id @default(cuid()) @map("id")
  score        Float    @map("score")
  letterGrade  String
  semester     String   @map("semester")
  academicYear String
  studentId    String
  courseId     String
  createdAt    DateTime @default(now())
  courses      Course   @relation(fields: [courseId], references: [id])
  students     Student  @relation(fields: [studentId], references: [id])

  @@unique([studentId, courseId, semester, academicYear])
  @@map("grades")
}

model CourseSchedule {
  id           String  @id @default(cuid()) @map("id")
  courseId     String
  day          String  @map("day")
  startTime    String
  endTime      String
  room         String  @map("room")
  building     String? @map("building")
  semester     String  @map("semester")
  academicYear String
  courses      Course  @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@map("course_schedules")
}

model SystemConfig {
  id          String   @id @default(cuid()) @map("id")
  key         String   @unique @map("key")
  value       String   @map("value")
  description String?  @map("description")
  category    String?  @map("category")
  updatedAt   DateTime

  @@map("system_configs")
}

model Notification {
  id        String           @id @default(cuid()) @map("id")
  userId    String
  title     String           @map("title")
  message   String           @map("message")
  type      NotificationType @default(info) @map("type")
  isRead    Boolean          @default(false)
  data      Json?            @map("data")
  createdAt DateTime         @default(now())
  readAt    DateTime?

  @@map("notifications")
}

model FileUpload {
  id           String   @id @default(cuid()) @map("id")
  filename     String   @map("filename")
  originalName String
  path         String   @map("path")
  size         Int      @map("size")
  mimeType     String
  uploadedBy   String
  category     String?  @map("category")
  createdAt    DateTime @default(now())

  @@map("file_uploads")
}

model Account {
  id                String  @id @default(cuid()) @map("id")
  userId            String
  type              String  @map("type")
  provider          String  @map("provider")
  providerAccountId String
  refresh_token     String? @map("refresh_token")
  access_token      String? @map("access_token")
  expires_at        Int?    @map("expires_at")
  token_type        String? @map("token_type")
  scope             String? @map("scope")
  id_token          String? @map("id_token")
  session_state     String? @map("session_state")
  users             User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model AcademicConsultation {
  id         String   @id @default(cuid()) @map("id")
  date       DateTime @map("date")
  uraian     String   @map("uraian")
  keterangan String   @map("keterangan")
  paraf      Boolean  @default(false) @map("paraf")
  studentId  String
  advisorId  String
  createdAt  DateTime @default(now())
  updatedAt  DateTime
  lecturers  Lecturer @relation(fields: [advisorId], references: [id])
  students   Student  @relation(fields: [studentId], references: [id])

  @@map("academic_consultations")
}

model AcademicEvent {
  id          String      @id @default(cuid()) @map("id")
  title       String      @map("title")
  description String?     @map("description")
  startDate   DateTime
  endDate     DateTime
  location    String?     @map("location")
  type        EventType   @map("type")
  examType    ExamType?
  status      EventStatus @default(confirmed) @map("status")
  studentId   String?
  courseId    String?
  lecturerId  String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime
  courses     Course?     @relation(fields: [courseId], references: [id])
  lecturers   Lecturer?   @relation(fields: [lecturerId], references: [id])
  students    Student?    @relation(fields: [studentId], references: [id])

  @@map("academic_events")
}

model VerificationToken {
  identifier String   @map("identifier")
  token      String   @unique @map("token")
  expires    DateTime @map("expires")

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Laboratory {
  id                String            @id @default(cuid()) @map("id")
  code              String            @unique @map("code")
  name              String            @map("name")
  description       String?           @map("description")
  image             String?           @map("image")
  capacity          Int               @map("capacity")
  credits           Int               @map("credits")
  semester          String            @map("semester")
  department        String            @map("department")
  location          String            @map("location")
  category          String            @map("category")
  status            LabStatus         @default(active) @map("status")
  instructorId      String?
  createdAt         DateTime          @default(now())
  updatedAt         DateTime
  lab_announcements LabAnnouncement[]
  lab_assignments   LabAssignment[]
  lab_materials     LabMaterial[]
  lab_registrations LabRegistration[]
  lab_sessions      LabSession[]
  lecturers         Lecturer?         @relation(fields: [instructorId], references: [id])

  @@map("laboratories")
}

model LabRegistration {
  id                         String                    @id @default(cuid()) @map("id")
  status                     LabRegistrationStatus     @default(pending) @map("status")
  registeredAt               DateTime                  @default(now())
  completedAt                DateTime?
  progress                   Float                     @default(0) @map("progress")
  grade                      String?                   @map("grade")
  studentId                  String
  laboratoryId               String
  createdAt                  DateTime                  @default(now())
  updatedAt                  DateTime
  lab_assignment_submissions LabAssignmentSubmission[]
  laboratories               Laboratory                @relation(fields: [laboratoryId], references: [id])
  students                   Student                   @relation(fields: [studentId], references: [id])

  @@unique([studentId, laboratoryId])
  @@map("lab_registrations")
}

model LabSession {
  id           String           @id @default(cuid()) @map("id")
  title        String           @map("title")
  description  String?          @map("description")
  sessionDate  DateTime
  startTime    String
  endTime      String
  location     String?          @map("location")
  status       LabSessionStatus @default(scheduled) @map("status")
  laboratoryId String
  createdAt    DateTime         @default(now())
  updatedAt    DateTime
  laboratories Laboratory       @relation(fields: [laboratoryId], references: [id])

  @@map("lab_sessions")
}

model LabAssignment {
  id                         String                    @id @default(cuid()) @map("id")
  title                      String                    @map("title")
  description                String                    @map("description")
  dueDate                    DateTime
  maxScore                   Float                     @default(100)
  laboratoryId               String
  createdAt                  DateTime                  @default(now())
  updatedAt                  DateTime
  lab_assignment_submissions LabAssignmentSubmission[]
  laboratories               Laboratory                @relation(fields: [laboratoryId], references: [id])

  @@map("lab_assignments")
}

model LabAssignmentSubmission {
  id                String          @id @default(cuid()) @map("id")
  submittedAt       DateTime        @default(now())
  score             Float?          @map("score")
  feedback          String?         @map("feedback")
  fileUrl           String?
  studentId         String
  assignmentId      String
  registrationId    String
  createdAt         DateTime        @default(now())
  updatedAt         DateTime
  lab_assignments   LabAssignment   @relation(fields: [assignmentId], references: [id])
  lab_registrations LabRegistration @relation(fields: [registrationId], references: [id])
  students          Student         @relation(fields: [studentId], references: [id])

  @@unique([studentId, assignmentId])
  @@map("lab_assignment_submissions")
}

model LabMaterial {
  id           String     @id @default(cuid()) @map("id")
  title        String     @map("title")
  description  String?    @map("description")
  type         String     @map("type")
  fileUrl      String?
  externalUrl  String?
  laboratoryId String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime
  laboratories Laboratory @relation(fields: [laboratoryId], references: [id])

  @@map("lab_materials")
}

model LabAnnouncement {
  id           String     @id @default(cuid()) @map("id")
  title        String     @map("title")
  content      String     @map("content")
  isImportant  Boolean    @default(false)
  laboratoryId String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime
  laboratories Laboratory @relation(fields: [laboratoryId], references: [id])

  @@map("lab_announcements")
}

enum Role {
  mahasiswa
  dosen
  staff_tu
  prodi
  dekan
  admin
  laboratory_admin
  reading_room_admin
  admin_umum
  admin_keuangan
  gkm
  kepala_tata_usaha
}

enum StudentStatus {
  active
  inactive
  graduated
  dropped_out
  suspended
}

enum KkpStatus {
  pending
  approved
  rejected
  in_progress
  completed
}

enum KkpDocumentType {
  application_letter
  proposal
  transcript
  acceptance_letter
  supervisor_letter
  report
  evaluation
  payment_proof_kkp_plus
  transcript_125_sks
  competency_certificate
  practicum_control_card
  falaq_practicum
  quran_reading_certificate
  academic_advisor_card
  dad_certificate
}

enum KkpRequirementType {
  payment_proof_kkp_plus
  transcript_125_sks
  competency_certificate
  practicum_control_card
  falaq_practicum
  quran_reading_certificate
  academic_advisor_card
  dad_certificate
}

enum DocumentStatus {
  pending
  verified
  rejected
}

enum ApprovalStatus {
  pending
  approved
  rejected
}

enum ExamType {
  proposal
  result
  final
  closing
  midterm
  other
}

enum ExamStatus {
  applicant
  pending
  scheduled
  completed
  passed
  failed
  cancelled
}

enum ExamDocumentType {
  payment_proof
  transcript
  proposal
  supervisor_approval
  pembayaran_bpp
  biaya_komprehensif
  surat_sk_pembimbing
  surat_penyelesaian_kkp
  transkrip_nilai_145
  praktikum_ilmu_falaq
  surat_publikasi_produk
  bukti_publish_produk
  surat_baca_alquran
  sertifikat_dad
  uji_plagiat_skripsi
  kartu_kontrol_seminar
  persetujuan_pembimbing
  biaya_ujian_seminar
  transkrip_nilai_hasil
  sertifikat_praktikum
  uji_plagiat_hasil
  persetujuan_pembimbing_hasil
  skripsi_6_rangkap
  pembayaran_ujian
  biaya_tambahan_wd2
  pembayaran_wisuda_perpustakaan
  uji_plagiat_tutup
  persetujuan_pembimbing_tutup
  skripsi_1_rangkap
  berkas_loa_jurnal
  transkrip_nilai_150
  berkas_persyaratan_yudisium
  other
}

enum ThesisStatus {
  pending
  approved
  rejected
  archived
}

enum PaymentCategory {
  laboratory
  exam
  kkp
  tuition
  other
}

enum PaymentStatus {
  pending
  completed
  failed
  refunded
}

enum BudgetStatus {
  active
  inactive
  closed
}

enum ExpenseStatus {
  pending
  approved
  rejected
  paid
}

enum LetterStatus {
  submitted
  in_review
  approved
  completed
  rejected
}

enum ApprovalRole {
  staff_tu
  prodi
  dekan
  none
}

enum BookStatus {
  available
  borrowed
  reserved
  maintenance
}

enum BorrowingStatus {
  active
  returned
  overdue
  lost
}

enum NotificationType {
  info
  warning
  error
  success
}

enum LabStatus {
  active
  inactive
  maintenance
}

enum LabRegistrationStatus {
  pending
  approved
  rejected
  completed
  dropped
}

enum LabSessionStatus {
  scheduled
  ongoing
  completed
  cancelled
}

enum EventType {
  exam
  class
  lab
  consultation
  seminar
  workshop
  deadline
  organization
}

enum EventStatus {
  confirmed
  pending
  cancelled
  completed
}
